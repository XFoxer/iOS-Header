//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "MapsActivityViewControllerDelegate-Protocol.h"
#import "MuninPresentation-Protocol.h"
#import "NavigationSessionObserver-Protocol.h"
#import "PPTTestCoordinatorProtocol-Protocol.h"
#import "ParkedCarActionDelegate-Protocol.h"
#import "PlaceCardActionDelegate-Protocol.h"
#import "PlatformControllerObserver-Protocol.h"
#import "ShareDelegate-Protocol.h"

@class AnalyticsMonitor, AppStateManager, BaseModeController, IOSBasedChromeViewController, MKMapView, MapsActivityViewController, MapsSceneDelegate, NSString, NavModeController, NavigationSession, PlatformController, RidesharingModeController, StepModeController, UIScrollView, UIViewController;
@protocol ActionCoordination, FlyoverActionCoordination, NavActionCoordination, StepActionCoordination;

__attribute__((visibility("hidden")))
@interface AppCoordinator : NSObject <PPTTestCoordinatorProtocol, PlatformControllerObserver, NavigationSessionObserver, MapsActivityViewControllerDelegate, ShareDelegate, PlaceCardActionDelegate, ParkedCarActionDelegate, MuninPresentation>
{
    MapsActivityViewController *_shareViewController;
    AnalyticsMonitor *_analyticsMonitor;
    CDUnknownBlockType _fixedProblemCompletion;
    BaseModeController *_baseModeController;
    NavModeController *_navModeController;
    RidesharingModeController *_ridesharingModeController;
    PlatformController *_platformController;
    AppStateManager *_appStateManager;
    MapsSceneDelegate *_mapsSceneDelegate;
    IOSBasedChromeViewController *_chromeViewController;
    StepModeController *_stepModeController;
    id <FlyoverActionCoordination> _flyoverActionCoordinator;
    NavigationSession *_observedNavigationSession;
}

- (void).cxx_destruct;
@property(retain, nonatomic) NavigationSession *observedNavigationSession; // @synthesize observedNavigationSession=_observedNavigationSession;
@property(readonly, nonatomic) id <FlyoverActionCoordination> flyoverActionCoordinator; // @synthesize flyoverActionCoordinator=_flyoverActionCoordinator;
@property(readonly, nonatomic) StepModeController *stepModeController; // @synthesize stepModeController=_stepModeController;
@property(nonatomic) __weak IOSBasedChromeViewController *chromeViewController; // @synthesize chromeViewController=_chromeViewController;
@property(nonatomic) __weak MapsSceneDelegate *mapsSceneDelegate; // @synthesize mapsSceneDelegate=_mapsSceneDelegate;
@property(retain, nonatomic) AppStateManager *appStateManager; // @synthesize appStateManager=_appStateManager;
@property(retain, nonatomic) PlatformController *platformController; // @synthesize platformController=_platformController;
@property(readonly, nonatomic) RidesharingModeController *ridesharingModeController; // @synthesize ridesharingModeController=_ridesharingModeController;
- (void)pptTestExitMunin;
- (void)pptTestEnterMuninWithEntryPoint:(id)arg1 muninView:(id)arg2 showsFullScreen:(_Bool)arg3;
- (void)pptTestSelectVenueSearchResult:(id)arg1;
- (void)pptTestPresentVenueForMapItem:(id)arg1 searchCategory:(id)arg2;
- (void)pptTestPresentPlacecardWithMapItem:(id)arg1;
- (id)_pptChromeTrayCoordinatorForCurrentMode;
@property(readonly, nonatomic) UIScrollView *pptTestScrollView;
- (void)pptTestDismissTrayAnimated:(_Bool)arg1 assertTrayType:(long long)arg2;
- (_Bool)pptTestIsTrayType:(long long)arg1;
- (void)pptTestUpdateTrayLayout:(unsigned long long)arg1 animated:(_Bool)arg2;
@property(readonly, nonatomic) _Bool pptTestCanUpdateTrayLayout;
- (void)pptTestOpenFirstCollection;
- (void)pptTestOpenCollections;
- (void)pptTestOpenRecents;
@property(readonly, nonatomic) UIScrollView *pptTestScrollViewForProactive;
- (void)pptTestOpenSettings;
- (void)pptTestStartTracePlaybackFromPath:(id)arg1;
- (void)pptTestResumeRealtimeTransitUpdates;
- (void)pptTestPauseRealtimeTransitUpdates;
- (_Bool)pptTestMoveToBoardStep;
- (void)pptTestMoveToNextStep;
@property(readonly, nonatomic) _Bool pptTestHasNextStep;
@property(readonly, nonatomic) long long pptTestCurrentStepIndex;
@property(readonly, nonatomic) _Bool pptTestSupportStepping;
- (void)pptTestOpenCommuteEntry:(id)arg1;
- (void)pptTestTransitionBetweenFullAndLightGuidance;
- (void)pptTestEndNavigation;
- (void)pptTestStartNavigation;
- (void)pptTestDoDirectionItem:(id)arg1;
@property(readonly, nonatomic) UIScrollView *pptTestScrollViewForDirectionsDetails;
@property(readonly, nonatomic) UIViewController *pptTestContaineeForDirectionsDetails;
- (void)pptTestPresentDirectionsDetails;
- (void)setPPTTestDirectionsPlan:(id)arg1;
- (void)pptTestCreateCustomSearchResultForDroppedPinAtPoint:(struct CLLocationCoordinate2D)arg1 animated:(_Bool)arg2;
- (void)pptSelectFirstGuidePublisher;
- (void)pptSelectSeeAllCuratedCollections;
- (void)pptTestSearchCancel;
- (void)pptTestEnterSearchMode;
- (void)pptTestRefreshSearch;
- (void)pptTestSearchForFieldItem:(id)arg1;
- (void)pptTestSearchEndEditing;
- (void)pptTestAutocompleteSearchForFieldItem:(id)arg1;
- (void)pptTestSearchNearbyCategoryWithIndex:(unsigned long long)arg1;
- (void)pptTestSearchRetainQueryForSelectedSearchCompletion:(id)arg1;
- (void)pptTestMediumizePlaceCardAnimated:(_Bool)arg1;
- (void)pptTestMinimizePlaceCardAnimated:(_Bool)arg1;
- (void)pptTestMaximizePlaceCardAnimated:(_Bool)arg1;
@property(readonly, nonatomic) _Bool pptTestCanResizePlacecard;
- (void)pptTestPresentPlaceCardForSearchResult:(id)arg1 animated:(_Bool)arg2;
- (void)pptTestResetForLaunchURL;
- (void)setPPTTestViewMode:(long long)arg1 animated:(_Bool)arg2;
@property(readonly, nonatomic) MKMapView *mapViewForPPTTest;
- (id)testCoordinator;
- (void)exitMunin;
- (void)enterMuninWithEntryPoint:(id)arg1 muninView:(id)arg2 showsFullScreen:(_Bool)arg3 originFrame:(struct CGRect)arg4;
- (id)muninActionCoordinator;
- (void)presentUnsupportedTransportTypeOrProtocolAlertForSharedTrip:(id)arg1;
- (void)presentChinaAlertForSharedTrip:(id)arg1;
- (void)closeSharedTrips;
- (void)openSharedTrip:(id)arg1;
- (void)_openSharedTrip:(id)arg1;
- (void)openSharedTrips;
- (void)_displayOrScheduleDisplayOfEnqueuedFixedProblemInvokedAfterWait:(_Bool)arg1;
- (void)displayAnyEnqueuedFixedProblemNotification;
- (void)displayOrScheduleDisplayOfEnqueuedFixedProblem:(CDUnknownBlockType)arg1;
- (void)dismissShareIfNeededAnimated:(_Bool)arg1;
- (void)mapsActivityViewController:(id)arg1 activityCompleted:(_Bool)arg2;
- (void)mapsActivityViewControllerPresentRoutingApps:(id)arg1;
- (void)mapsActivityViewControllerPrint:(id)arg1;
@property(readonly, nonatomic) MKMapView *mapsActivityMapView;
- (void)setNeedsUserActivityUpdate;
- (void)archiveMapsActivity;
- (void)editLocationForParkedCar:(id)arg1;
- (void)startTableBookingFlowFromMapItem:(id)arg1;
- (void)_presentActivityViewController:(id)arg1 sourceView:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)sharePublisher:(id)arg1 sourceView:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)shareCuratedCollection:(id)arg1 withRefinedMapItems:(id)arg2 sourceView:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)shareCollection:(id)arg1 sourceView:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)shareItem:(id)arg1 sourceView:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)exitFlyover;
- (void)enterFlyoverForMapItem:(id)arg1;
- (void)hideFullscreenDirectionsList;
- (void)showFullscreenDirectionsList;
- (void)dismissRidesharingSessionAndReturnToRoutePlanning:(_Bool)arg1;
- (void)continueRideBookingSessionWithApplicationIdentifier:(id)arg1;
- (void)startRideBookingSessionWithRideBookingRideOption:(id)arg1;
- (void)displayIncidentReportSubmissionWithItem:(id)arg1 report:(id)arg2;
- (void)openTransitSchedulesWithMapItem:(id)arg1 departureSequence:(id)arg2;
- (void)_popSteppingModeWithCompletion:(CDUnknownBlockType)arg1;
- (void)_popNavModeWithCompletion:(CDUnknownBlockType)arg1;
- (_Bool)applyPendingActionIfNeeded;
- (void)endNavigationAndReturnToRoutePlanning:(_Bool)arg1;
- (void)startNavigationWithRouteCollection:(id)arg1 navigationDetailsOptions:(struct NavigationDetailsOptions)arg2;
@property(readonly, nonatomic) id <StepActionCoordination> stepActionCoordinator;
@property(readonly, nonatomic) id <NavActionCoordination> navActionCoordinator;
@property(readonly, nonatomic) NavModeController *navModeController; // @synthesize navModeController=_navModeController;
- (void)presentPOIEnrichmentWithCoordinator:(id)arg1;
- (void)openCuratedCollectionsList:(id)arg1 usingTitle:(id)arg2;
- (void)openAllCuratedCollections;
- (void)openPublisherWithIdentifier:(id)arg1;
- (void)openCuratedCollectionWithIdentifier:(id)arg1;
- (void)openRelatedMapItems:(id)arg1 withTitle:(id)arg2 originalMapItem:(id)arg3 analyticsDelegate:(id)arg4;
- (void)openParentMapItem:(id)arg1;
- (void)enterRoutePlanningWithDirectionItem:(id)arg1 withUserInfo:(id)arg2;
- (void)toggleRoutePlanning;
- (_Bool)isRoutePlanningPresented;
- (void)openCollection:(id)arg1;
- (void)openSearch:(id)arg1 andResults:(id)arg2;
- (void)startSearchMode;
@property(readonly, nonatomic) id <ActionCoordination> baseActionCoordinator;
@property(readonly, nonatomic) BaseModeController *baseModeController; // @synthesize baseModeController=_baseModeController;
- (void)getCurrentSceneTitleWithCompletion:(CDUnknownBlockType)arg1;
- (int)_analyticsPipelineTransportModeForMSPTransportType:(long long)arg1;
- (_Bool)isNavigationTurnByTurnOrStepping;
- (void)_navigationSessionStopped:(id)arg1 movingToSession:(id)arg2;
- (void)_navigationSessionRunning:(id)arg1;
- (void)_navigationSession:(id)arg1 didChangeState:(unsigned long long)arg2;
- (void)navigationSession:(id)arg1 didChangeCurrentTransportType:(long long)arg2;
- (void)navigationSession:(id)arg1 didUpdateRouteCollection:(id)arg2;
- (void)mapsSession:(id)arg1 didChangeState:(unsigned long long)arg2;
- (void)platformController:(id)arg1 didChangeCurrentSessionFromSession:(id)arg2 toSession:(id)arg3;
- (void)platformController:(id)arg1 willChangeCurrentSessionFromSession:(id)arg2 toSession:(id)arg3;
- (id)initWithPlatformController:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

