//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Allocator;

struct Field {
    unsigned char _field1[1];
};

struct FlatBufferBuilder {
    struct vector_downward _field1;
    unsigned int _field2;
    unsigned short _field3;
    _Bool _field4;
    _Bool _field5;
    unsigned long long _field6;
    _Bool _field7;
    _Bool _field8;
    struct set<flatbuffers::Offset<flatbuffers::String>, flatbuffers::FlatBufferBuilder::StringOffsetCompare, std::__1::allocator<flatbuffers::Offset<flatbuffers::String>>> *_field9;
};

struct Item {
    unsigned char _field1[1];
};

struct Offset<Siri::Vocabulary::Field> {
    unsigned int _field1;
};

struct Offset<Siri::Vocabulary::Item> {
    unsigned int _field1;
};

struct OntologyEdgeName;

struct OntologyNodeName;

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct optional<std::__1::pair<const siri::ontology::OntologyNodeName *, const siri::ontology::OntologyEdgeName *>> {
    union {
        char _field1;
        pair_530c4d38 _field2;
    } _field1;
    _Bool _field2;
};

struct pair<const siri::ontology::OntologyNodeName *, const siri::ontology::OntologyEdgeName *> {
    struct OntologyNodeName *_field1;
    struct OntologyEdgeName *_field2;
};

struct reference_wrapper<siri::ontology::UsoGraphNode>;

struct set<flatbuffers::Offset<flatbuffers::String>, flatbuffers::FlatBufferBuilder::StringOffsetCompare, std::__1::allocator<flatbuffers::Offset<flatbuffers::String>>>;

struct vector<std::__1::reference_wrapper<siri::ontology::UsoGraphNode>, std::__1::allocator<std::__1::reference_wrapper<siri::ontology::UsoGraphNode>>> {
    struct reference_wrapper<siri::ontology::UsoGraphNode> *_field1;
    struct reference_wrapper<siri::ontology::UsoGraphNode> *_field2;
    struct __compressed_pair<std::__1::reference_wrapper<siri::ontology::UsoGraphNode>*, std::__1::allocator<std::__1::reference_wrapper<siri::ontology::UsoGraphNode>>> {
        struct reference_wrapper<siri::ontology::UsoGraphNode> *_field1;
    } _field3;
};

struct vector_downward {
    struct Allocator *_field1;
    _Bool _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    char *_field6;
    char *_field7;
    char *_field8;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct Offset<Siri::Vocabulary::Field> {
    unsigned int _field1;
} Offset_e7496d7a;

typedef struct Offset<Siri::Vocabulary::Item> {
    unsigned int _field1;
} Offset_1e806769;

typedef struct optional<std::__1::pair<const siri::ontology::OntologyNodeName *, const siri::ontology::OntologyEdgeName *>> {
    union {
        char _field1;
        pair_530c4d38 _field2;
    } _field1;
    _Bool _field2;
} optional_c1adc4fa;

typedef struct pair<const siri::ontology::OntologyNodeName *, const siri::ontology::OntologyEdgeName *> {
    struct OntologyNodeName *_field1;
    struct OntologyEdgeName *_field2;
} pair_530c4d38;

typedef struct vector<std::__1::reference_wrapper<siri::ontology::UsoGraphNode>, std::__1::allocator<std::__1::reference_wrapper<siri::ontology::UsoGraphNode>>> {
    struct reference_wrapper<siri::ontology::UsoGraphNode> *_field1;
    struct reference_wrapper<siri::ontology::UsoGraphNode> *_field2;
    struct __compressed_pair<std::__1::reference_wrapper<siri::ontology::UsoGraphNode>*, std::__1::allocator<std::__1::reference_wrapper<siri::ontology::UsoGraphNode>>> {
        struct reference_wrapper<siri::ontology::UsoGraphNode> *_field1;
    } _field3;
} vector_4d4855f7;

