//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NSString, NSURL;
@protocol HDHFDataStoreDelegate, OS_dispatch_queue;

@interface HDHFDataStore : NSObject
{
    shared_ptr_c7cae3aa _fileSystem;
    struct os_unfair_lock_s _lock;
    shared_ptr_88ae0538 _highFrequencyDataStore;
    _Atomic _Bool _invalidated;
    _Atomic _Bool _hasOpenStore;
    NSObject<OS_dispatch_queue> *_openQueue;
    long long _openAttempt;
    id <HDHFDataStoreDelegate> _delegate;
    NSString *_fileSystemPath;
}

+ (_Bool)_shouldRequestRebuildForFailure:(long long)arg1 code:(int)arg2;
+ (_Bool)_shouldRequestRebuildForError:(id)arg1;
+ (_Bool)_errorIsOutOfSpace:(id)arg1;
+ (_Bool)_errorIndicatesCorruption:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(readonly, copy, nonatomic) NSString *fileSystemPath; // @synthesize fileSystemPath=_fileSystemPath;
@property(nonatomic) __weak id <HDHFDataStoreDelegate> delegate; // @synthesize delegate=_delegate;
- (void)unitTest_requestRebuild;
- (void)unitTest_resetRebuildState;
- (id)fileManager;
- (_Bool)_lock_performPostRestoreCleanup:(id *)arg1;
- (_Bool)_lock_rollCloudSyncOwnerIdentifier:(id *)arg1;
- (_Bool)retryDecompressionAfterError:(id)arg1;
- (_Bool)_lock_restoreHFDFromArchive:(id *)arg1;
- (_Bool)_lock_prepareForRecovery:(id *)arg1;
- (_Bool)_lock_deleteCompressedArchive:(id *)arg1;
- (_Bool)_lock_archiveHFD:(id *)arg1;
- (_Bool)_lock_performNextRebuildStepForState:(long long)arg1 error:(id *)arg2;
- (_Bool)_requiresRebuildForState:(long long)arg1;
- (void)_lock_checkForLargeSparseHFD;
- (_Bool)_lock_rebuildIfNeeded:(id *)arg1;
@property(readonly, nonatomic) long long rebuildState;
- (void)setRebuildState:(long long)arg1;
- (void)requestHFDRebuild;
@property(readonly, copy, nonatomic) NSURL *directoryURL;
@property(readonly, copy, nonatomic) NSURL *dataStoreURL;
- (_Bool)_convertExceptionsToError:(id *)arg1 inBlock:(CDUnknownBlockType)arg2;
- (_Bool)accessStoreWithError:(id *)arg1 block:(CDUnknownBlockType)arg2;
- (shared_ptr_88ae0538)_highFrequencyDataStoreWithError:(id *)arg1;
- (shared_ptr_88ae0538)_lock_highFrequencyDataStoreWithError:(id *)arg1;
- (_Bool)_lock_openHighFrequencyDataStoreWithError:(id *)arg1;
- (shared_ptr_88ae0538)_lock_primitiveOpenHighFrequencyDataStoreWithError:(id *)arg1;
- (_Bool)discardStoreWithError:(id *)arg1;
- (CDUnknownBlockType)flushHandlerForInvalidation:(_Bool)arg1;
- (id)diagnosticDescription;
- (id)description;
- (id)_walPathForHFDAtPath:(id)arg1;
- (void)dealloc;
- (id)initWithPath:(id)arg1 fileSystem:(shared_ptr_c7cae3aa)arg2;
- (id)initWithPath:(id)arg1;
- (_Bool)deleteHFDAt:(id)arg1 error:(id *)arg2;
- (_Bool)moveHFDAsideWithoutOverwritingFrom:(id)arg1 to:(id)arg2 error:(id *)arg3;
- (unique_ptr_8ada683d)dataStoreAtURL:(id)arg1 filesystem:(const shared_ptr_c7cae3aa *)arg2 allowCheckpoint:(_Bool)arg3 error:(id *)arg4;
- (_Bool)deleteFileAt:(id)arg1 error:(id *)arg2;
- (_Bool)moveFileOnlyIfDestinationEmptyFrom:(id)arg1 to:(id)arg2 error:(id *)arg3;
- (id)writeaheadLogURLForHFDAt:(id)arg1;

@end

